# This GitHub actions workflow is intended to run exe_playoffs_table
# It gets secrets variables, install rclone to interact with dropbox, install dependencies, run python program
# and send an email to report success or failure with the table url online
name: Run playoffs table

concurrency:
  group: predict-run
  cancel-in-progress: false

on:
  workflow_dispatch:

jobs:
  run-python:
    runs-on: ubuntu-latest
    env:
      IMGBB_API_KEY: ${{ secrets.IMGBB_API_KEY }}
      RCLONE_CONFIG_BASE64: ${{ secrets.RCLONE_CONFIG_BASE64 }}
      GMAIL_USER: ${{ secrets.GMAIL_USER }}
      RECIPIENT_EMAIL: ${{ secrets.RECIPIENT_EMAIL }}
      GMAIL_APP_PASSWORD: ${{ secrets.GMAIL_APP_PASSWORD }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install rclone for DropBox 
        run: | 
          curl https://rclone.org/install.sh | sudo bash
          
      - name: Configure rclone 
        run: | 
          mkdir -p ~/.config/rclone 
          echo "$RCLONE_CONFIG_BASE64" | base64 --decode > ~/.config/rclone/rclone.conf
          chmod 600 ~/.config/rclone/rclone.conf

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Send Email if setup or pre-run steps fail
        if: ${{ failure() }}
        run: |
          python - <<EOF
          import os, smtplib
          from email.message import EmailMessage

          run_url = f"{os.environ['GITHUB_SERVER_URL']}/{os.environ['GITHUB_REPOSITORY']}/actions/runs/{os.environ['GITHUB_RUN_ID']}"
          
          msg = EmailMessage()
          msg['Subject'] = f'GitHub Action PRE-RUN FAILED - Playoffs table'
          msg.set_content(f"An error occurred before running exe_plyoffs_table.\n\nCheck logs: {run_url}")
          msg['From'] = os.environ["GMAIL_USER"]
          msg['To'] = os.environ["RECIPIENT_EMAIL"]

          with smtplib.SMTP("smtp.gmail.com", 587) as server:
              server.starttls()
              server.login(os.environ["GMAIL_USER"],os.environ["GMAIL_APP_PASSWORD"])
              server.send_message(msg)
          EOF

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Python script
        run: |
          set -e
          cd PYTHON_PREDICT
          python exe_playoffs_table.py
          cd ..
          echo "output=$(cat PYTHON_PREDICT/exe_output.json | base64 -w0)" >> $GITHUB_ENV

      - name: Send Email (Success or Failure)
        if: always()
        run: |
          python - <<EOF
          import os, smtplib, json, base64
          from email.message import EmailMessage

          status = "${{ job.status }}"
          run_url = f"{os.environ['GITHUB_SERVER_URL']}/{os.environ['GITHUB_REPOSITORY']}/actions/runs/{os.environ['GITHUB_RUN_ID']}"
          
          msg = EmailMessage()
          if status == "success":
              output_data = json.loads(base64.b64decode(os.environ["output"]).decode())
              msg['Subject'] = f'GitHub Action SUCCEEDED - Playoffs table'
              msg.add_alternative(f"""
                <html>
                  <body>
                    <p>Succeeded to exe playoffs table</p>
                    <p><u>image_url:</u> {output_data.get('image_url', 'N/A')}</p>
                  </body>
                </html>
                """, subtype='html')
              
          else:
              msg['Subject'] = f'GitHub Action FAILED - Playoffs table'
              msg.set_content(f"Failed to exe playoffs table \n\nRun logs: {run_url}")

          msg['From'] = os.environ["GMAIL_USER"]
          msg['To'] = os.environ["RECIPIENT_EMAIL"]

          with smtplib.SMTP("smtp.gmail.com", 587) as server:
              server.starttls()
              server.login(os.environ["GMAIL_USER"],os.environ["GMAIL_APP_PASSWORD"])
              server.send_message(msg)
          EOF
